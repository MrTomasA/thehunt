/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.3.5.0 (NJsonSchema v9.4.5.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var TheHunt;
(function (TheHunt) {
    var Client;
    (function (Client) {
        var TheHuntClient = /** @class */ (function () {
            function TheHuntClient($http, $q, baseUrl) {
                this.baseUrl = undefined;
                this.jsonParseReviver = undefined;
                this.http = $http;
                this.q = $q;
                this.baseUrl = baseUrl ? baseUrl : "http://localhost:63585";
            }
            TheHuntClient.prototype.createJobPost = function (jobPost) {
                var _this = this;
                var url_ = this.baseUrl + "/api/JobPost";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(jobPost);
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processCreateJobPost(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processCreateJobPost(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processCreateJobPost = function (response) {
                var status = response.status;
                if (status === 201) {
                    var _responseText = response.data;
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result201 = resultData201 ? JobPost.fromJS(resultData201) : null;
                    return this.q.resolve(result201);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.createJobType = function (jobType) {
                var _this = this;
                var url_ = this.baseUrl + "/api/JobPost/job-type";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(jobType);
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processCreateJobType(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processCreateJobType(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processCreateJobType = function (response) {
                var status = response.status;
                if (status === 201) {
                    var _responseText = response.data;
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result201 = resultData201 ? JobType.fromJS(resultData201) : null;
                    return this.q.resolve(result201);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.getJobTypes = function () {
                var _this = this;
                var url_ = this.baseUrl + "/api/JobPost/job-type";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    url: url_,
                    method: "GET",
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processGetJobTypes(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processGetJobTypes(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processGetJobTypes = function (response) {
                var status = response.status;
                if (status === 200) {
                    var _responseText = response.data;
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                            var item = resultData200_1[_i];
                            result200.push(JobType.fromJS(item));
                        }
                    }
                    return this.q.resolve(result200);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.createJobLocation = function (jobLocation) {
                var _this = this;
                var url_ = this.baseUrl + "/api/JobPost/job-location";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(jobLocation);
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processCreateJobLocation(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processCreateJobLocation(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processCreateJobLocation = function (response) {
                var status = response.status;
                if (status === 201) {
                    var _responseText = response.data;
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result201 = resultData201 ? JobLocation.fromJS(resultData201) : null;
                    return this.q.resolve(result201);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.getJobLocations = function () {
                var _this = this;
                var url_ = this.baseUrl + "/api/JobPost/job-location";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    url: url_,
                    method: "GET",
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processGetJobLocations(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processGetJobLocations(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processGetJobLocations = function (response) {
                var status = response.status;
                if (status === 200) {
                    var _responseText = response.data;
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_2 = resultData200; _i < resultData200_2.length; _i++) {
                            var item = resultData200_2[_i];
                            result200.push(JobLocation.fromJS(item));
                        }
                    }
                    return this.q.resolve(result200);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.createBusinessStream = function (businessStream) {
                var _this = this;
                var url_ = this.baseUrl + "/api/Company/business-stream";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(businessStream);
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processCreateBusinessStream(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processCreateBusinessStream(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processCreateBusinessStream = function (response) {
                var status = response.status;
                if (status === 201) {
                    var _responseText = response.data;
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result201 = resultData201 ? BusinessStream.fromJS(resultData201) : null;
                    return this.q.resolve(result201);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.getBusinessStreams = function () {
                var _this = this;
                var url_ = this.baseUrl + "/api/Company/business-stream";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    url: url_,
                    method: "GET",
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processGetBusinessStreams(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processGetBusinessStreams(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processGetBusinessStreams = function (response) {
                var status = response.status;
                if (status === 200) {
                    var _responseText = response.data;
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_3 = resultData200; _i < resultData200_3.length; _i++) {
                            var item = resultData200_3[_i];
                            result200.push(BusinessStream.fromJS(item));
                        }
                    }
                    return this.q.resolve(result200);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.createCompany = function (company) {
                var _this = this;
                var url_ = this.baseUrl + "/api/Company";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(company);
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processCreateCompany(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processCreateCompany(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processCreateCompany = function (response) {
                var status = response.status;
                if (status === 201) {
                    var _responseText = response.data;
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result201 = resultData201 ? Company.fromJS(resultData201) : null;
                    return this.q.resolve(result201);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.getCompanies = function () {
                var _this = this;
                var url_ = this.baseUrl + "/api/Company";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    url: url_,
                    method: "GET",
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processGetCompanies(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processGetCompanies(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processGetCompanies = function (response) {
                var status = response.status;
                if (status === 200) {
                    var _responseText = response.data;
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_4 = resultData200; _i < resultData200_4.length; _i++) {
                            var item = resultData200_4[_i];
                            result200.push(Company.fromJS(item));
                        }
                    }
                    return this.q.resolve(result200);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.createSkillSet = function (skillSet) {
                var _this = this;
                var url_ = this.baseUrl + "/api/Talent/skill-set";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(skillSet);
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processCreateSkillSet(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processCreateSkillSet(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processCreateSkillSet = function (response) {
                var status = response.status;
                if (status === 201) {
                    var _responseText = response.data;
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result201 = resultData201 ? BusinessStream.fromJS(resultData201) : null;
                    return this.q.resolve(result201);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.getUserTypes = function () {
                var _this = this;
                var url_ = this.baseUrl + "/api/User/user-type";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    url: url_,
                    method: "GET",
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processGetUserTypes(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processGetUserTypes(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processGetUserTypes = function (response) {
                var status = response.status;
                if (status === 200) {
                    var _responseText = response.data;
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_5 = resultData200; _i < resultData200_5.length; _i++) {
                            var item = resultData200_5[_i];
                            result200.push(UserType.fromJS(item));
                        }
                    }
                    return this.q.resolve(result200);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.createUserType = function (userType) {
                var _this = this;
                var url_ = this.baseUrl + "/api/User/user-type";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(userType);
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processCreateUserType(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processCreateUserType(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processCreateUserType = function (response) {
                var status = response.status;
                if (status === 201) {
                    var _responseText = response.data;
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result201 = resultData201 ? UserType.fromJS(resultData201) : null;
                    return this.q.resolve(result201);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.createUserLog = function (userLog) {
                var _this = this;
                var url_ = this.baseUrl + "/api/User/user-log";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(userLog);
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processCreateUserLog(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processCreateUserLog(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processCreateUserLog = function (response) {
                var status = response.status;
                if (status === 201) {
                    var _responseText = response.data;
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result201 = resultData201 ? UserLog.fromJS(resultData201) : null;
                    return this.q.resolve(result201);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.getUserAccounts = function () {
                var _this = this;
                var url_ = this.baseUrl + "/api/User/user-account";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    url: url_,
                    method: "GET",
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processGetUserAccounts(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processGetUserAccounts(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processGetUserAccounts = function (response) {
                var status = response.status;
                if (status === 200) {
                    var _responseText = response.data;
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_6 = resultData200; _i < resultData200_6.length; _i++) {
                            var item = resultData200_6[_i];
                            result200.push(UserAccount.fromJS(item));
                        }
                    }
                    return this.q.resolve(result200);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.createUserAccount = function (userAccount) {
                var _this = this;
                var url_ = this.baseUrl + "/api/User/user-account";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(userAccount);
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processCreateUserAccount(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processCreateUserAccount(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processCreateUserAccount = function (response) {
                var status = response.status;
                if (status === 201) {
                    var _responseText = response.data;
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result201 = resultData201 ? UserAccount.fromJS(resultData201) : null;
                    return this.q.resolve(result201);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            return TheHuntClient;
        }());
        Client.TheHuntClient = TheHuntClient;
        var JobPost = /** @class */ (function () {
            function JobPost(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            JobPost.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.postedById = data["postedById"] !== undefined ? data["postedById"] : null;
                    this.jobTypeId = data["jobTypeId"] !== undefined ? data["jobTypeId"] : null;
                    this.companyId = data["companyId"] !== undefined ? data["companyId"] : null;
                    this.isCompanyNameHidden = data["isCompanyNameHidden"] !== undefined ? data["isCompanyNameHidden"] : null;
                    this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : null;
                    this.jobDescription = data["jobDescription"] !== undefined ? data["jobDescription"] : null;
                    this.jobLocationId = data["jobLocationId"] !== undefined ? data["jobLocationId"] : null;
                    this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
                }
            };
            JobPost.fromJS = function (data) {
                var result = new JobPost();
                result.init(data);
                return result;
            };
            JobPost.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["postedById"] = this.postedById !== undefined ? this.postedById : null;
                data["jobTypeId"] = this.jobTypeId !== undefined ? this.jobTypeId : null;
                data["companyId"] = this.companyId !== undefined ? this.companyId : null;
                data["isCompanyNameHidden"] = this.isCompanyNameHidden !== undefined ? this.isCompanyNameHidden : null;
                data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : null;
                data["jobDescription"] = this.jobDescription !== undefined ? this.jobDescription : null;
                data["jobLocationId"] = this.jobLocationId !== undefined ? this.jobLocationId : null;
                data["isActive"] = this.isActive !== undefined ? this.isActive : null;
                return data;
            };
            return JobPost;
        }());
        Client.JobPost = JobPost;
        var JobType = /** @class */ (function () {
            function JobType(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            JobType.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.name = data["name"] !== undefined ? data["name"] : null;
                }
            };
            JobType.fromJS = function (data) {
                var result = new JobType();
                result.init(data);
                return result;
            };
            JobType.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["name"] = this.name !== undefined ? this.name : null;
                return data;
            };
            return JobType;
        }());
        Client.JobType = JobType;
        var JobLocation = /** @class */ (function () {
            function JobLocation(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            JobLocation.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.streetAddress = data["streetAddress"] !== undefined ? data["streetAddress"] : null;
                    this.city = data["city"] !== undefined ? data["city"] : null;
                    this.state = data["state"] !== undefined ? data["state"] : null;
                    this.country = data["country"] !== undefined ? data["country"] : null;
                    this.zip = data["zip"] !== undefined ? data["zip"] : null;
                }
            };
            JobLocation.fromJS = function (data) {
                var result = new JobLocation();
                result.init(data);
                return result;
            };
            JobLocation.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["streetAddress"] = this.streetAddress !== undefined ? this.streetAddress : null;
                data["city"] = this.city !== undefined ? this.city : null;
                data["state"] = this.state !== undefined ? this.state : null;
                data["country"] = this.country !== undefined ? this.country : null;
                data["zip"] = this.zip !== undefined ? this.zip : null;
                return data;
            };
            return JobLocation;
        }());
        Client.JobLocation = JobLocation;
        var BusinessStream = /** @class */ (function () {
            function BusinessStream(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            BusinessStream.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.businessStreamName = data["businessStreamName"] !== undefined ? data["businessStreamName"] : null;
                }
            };
            BusinessStream.fromJS = function (data) {
                var result = new BusinessStream();
                result.init(data);
                return result;
            };
            BusinessStream.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["businessStreamName"] = this.businessStreamName !== undefined ? this.businessStreamName : null;
                return data;
            };
            return BusinessStream;
        }());
        Client.BusinessStream = BusinessStream;
        var Company = /** @class */ (function () {
            function Company(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            Company.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.companyName = data["companyName"] !== undefined ? data["companyName"] : null;
                    this.profileDescription = data["profileDescription"] !== undefined ? data["profileDescription"] : null;
                    this.businessStreamId = data["businessStreamId"] !== undefined ? data["businessStreamId"] : null;
                    this.establishmentDate = data["establishmentDate"] ? new Date(data["establishmentDate"].toString()) : null;
                    this.companyWebsiteUrl = data["companyWebsiteUrl"] !== undefined ? data["companyWebsiteUrl"] : null;
                }
            };
            Company.fromJS = function (data) {
                var result = new Company();
                result.init(data);
                return result;
            };
            Company.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["companyName"] = this.companyName !== undefined ? this.companyName : null;
                data["profileDescription"] = this.profileDescription !== undefined ? this.profileDescription : null;
                data["businessStreamId"] = this.businessStreamId !== undefined ? this.businessStreamId : null;
                data["establishmentDate"] = this.establishmentDate ? this.establishmentDate.toISOString() : null;
                data["companyWebsiteUrl"] = this.companyWebsiteUrl !== undefined ? this.companyWebsiteUrl : null;
                return data;
            };
            return Company;
        }());
        Client.Company = Company;
        var SkillSet = /** @class */ (function () {
            function SkillSet(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            SkillSet.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.skillSetName = data["skillSetName"] !== undefined ? data["skillSetName"] : null;
                }
            };
            SkillSet.fromJS = function (data) {
                var result = new SkillSet();
                result.init(data);
                return result;
            };
            SkillSet.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["skillSetName"] = this.skillSetName !== undefined ? this.skillSetName : null;
                return data;
            };
            return SkillSet;
        }());
        Client.SkillSet = SkillSet;
        var UserType = /** @class */ (function () {
            function UserType(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            UserType.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.userTypeName = data["userTypeName"] !== undefined ? data["userTypeName"] : null;
                }
            };
            UserType.fromJS = function (data) {
                var result = new UserType();
                result.init(data);
                return result;
            };
            UserType.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["userTypeName"] = this.userTypeName !== undefined ? this.userTypeName : null;
                return data;
            };
            return UserType;
        }());
        Client.UserType = UserType;
        var UserLog = /** @class */ (function () {
            function UserLog(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            UserLog.prototype.init = function (data) {
                if (data) {
                    this.userAccountId = data["userAccountId"] !== undefined ? data["userAccountId"] : null;
                    this.lastLoginDate = data["lastLoginDate"] ? new Date(data["lastLoginDate"].toString()) : null;
                    this.lastJobApplyDate = data["lastJobApplyDate"] ? new Date(data["lastJobApplyDate"].toString()) : null;
                }
            };
            UserLog.fromJS = function (data) {
                var result = new UserLog();
                result.init(data);
                return result;
            };
            UserLog.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["userAccountId"] = this.userAccountId !== undefined ? this.userAccountId : null;
                data["lastLoginDate"] = this.lastLoginDate ? this.lastLoginDate.toISOString() : null;
                data["lastJobApplyDate"] = this.lastJobApplyDate ? this.lastJobApplyDate.toISOString() : null;
                return data;
            };
            return UserLog;
        }());
        Client.UserLog = UserLog;
        var UserAccount = /** @class */ (function () {
            function UserAccount(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            UserAccount.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.userTypeId = data["userTypeId"] !== undefined ? data["userTypeId"] : null;
                    this.email = data["email"] !== undefined ? data["email"] : null;
                    this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : null;
                    this.gender = data["gender"] !== undefined ? data["gender"] : null;
                    this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
                    this.contactNumber = data["contactNumber"] !== undefined ? data["contactNumber"] : null;
                    this.emailNotificationActive = data["emailNotificationActive"] !== undefined ? data["emailNotificationActive"] : null;
                    this.registrationDate = data["registrationDate"] ? new Date(data["registrationDate"].toString()) : null;
                }
            };
            UserAccount.fromJS = function (data) {
                var result = new UserAccount();
                result.init(data);
                return result;
            };
            UserAccount.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["userTypeId"] = this.userTypeId !== undefined ? this.userTypeId : null;
                data["email"] = this.email !== undefined ? this.email : null;
                data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : null;
                data["gender"] = this.gender !== undefined ? this.gender : null;
                data["isActive"] = this.isActive !== undefined ? this.isActive : null;
                data["contactNumber"] = this.contactNumber !== undefined ? this.contactNumber : null;
                data["emailNotificationActive"] = this.emailNotificationActive !== undefined ? this.emailNotificationActive : null;
                data["registrationDate"] = this.registrationDate ? this.registrationDate.toISOString() : null;
                return data;
            };
            return UserAccount;
        }());
        Client.UserAccount = UserAccount;
        var SwaggerException = /** @class */ (function (_super) {
            __extends(SwaggerException, _super);
            function SwaggerException(message, status, response, result) {
                var _this = _super.call(this) || this;
                _this.message = message;
                _this.status = status;
                _this.response = response;
                _this.result = result;
                return _this;
            }
            return SwaggerException;
        }(Error));
        Client.SwaggerException = SwaggerException;
        function throwException(q, message, status, response, result) {
            if (result !== null && result !== undefined)
                return q.reject(result);
            else
                return q.reject(new SwaggerException(message, status, response, null));
        }
        function blobToText(blob, q) {
            return new q(function (resolve) {
                var reader = new FileReader();
                reader.onload = function () {
                    resolve(this.result);
                };
                reader.readAsText(blob);
            });
        }
        // build angular registrations for the client(s)
        var clientClasses = { 'TheHuntClient': TheHuntClient };
        for (var clientClass in clientClasses) {
            if (clientClasses.hasOwnProperty(clientClass)) {
                angular.module('angularApp').service(clientClass, ['$http', '$q', clientClasses[clientClass]]);
            }
        }
    })(Client = TheHunt.Client || (TheHunt.Client = {}));
})(TheHunt || (TheHunt = {}));

var TheHunt;
(function (TheHunt) {
    'use strict';
    var BusinessStream = TheHunt.Client.BusinessStream;
    var Company = TheHunt.Client.Company;
    var SkillSet = TheHunt.Client.SkillSet;
    var UserAccount = TheHunt.Client.UserAccount;
    var JobType = TheHunt.Client.JobType;
    var JobLocation = TheHunt.Client.JobLocation;
    var JobPost = TheHunt.Client.JobPost;
    var AdminMetadata = {
        bindings: {},
        templateUrl: ['paths', function (paths) { return paths.AppBase + "components/admin-metadata/admin-metadata.html"; }],
        controller: 'AdminMetadataController'
    };
    var AdminMetadataController = /** @class */ (function () {
        function AdminMetadataController(theHuntClient, toastr) {
            var _this = this;
            this.$onInit = function () {
                _this.businessStream = new BusinessStream();
                _this.company = new Company();
                _this.skillSet = new SkillSet();
                //this.userType = new UserType();
                _this.userAccount = new UserAccount();
                _this.jobType = new JobType();
                _this.jobLocation = new JobLocation();
                _this.jobPost = new JobPost();
                _this.businessStreams = [];
                _this.userTypes = [];
                _this.companies = [];
                _this.jobTypes = [];
                _this.jobLocations = [];
                _this.userAccounts = [];
                _this.theHuntClient.getBusinessStreams().then(function (businessStreams) {
                    _this.businessStreams = businessStreams;
                });
                _this.theHuntClient.getUserTypes().then(function (userTypes) {
                    _this.userTypes = userTypes;
                });
                _this.theHuntClient.getCompanies().then(function (companies) {
                    _this.companies = companies;
                });
                _this.theHuntClient.getJobLocations().then(function (jobLocations) {
                    _this.jobLocations = jobLocations;
                });
                _this.theHuntClient.getJobTypes().then(function (jobTypes) {
                    _this.jobTypes = jobTypes;
                });
                _this.theHuntClient.getUserAccounts().then(function (userAccounts) {
                    _this.userAccounts = userAccounts;
                });
                _this.genders = [
                    { "key": "M", "value": "Male" },
                    { "key": "F", "value": "Female" }
                ];
            };
            this.CreateBusinessStream = function () {
                if (_this.businessStream.businessStreamName) {
                    _this.theHuntClient.createBusinessStream(_this.businessStream).then(function (businessStream) {
                        _this.businessStream = businessStream;
                        _this.toastr.success('You successfully saved a BusinessStream');
                        _this.theHuntClient.getBusinessStreams().then(function (businessStreams) {
                            _this.businessStreams = businessStreams;
                        });
                    })
                        .catch(function (error) {
                        _this.toastr.error('An error occured ' + error);
                    });
                }
                else {
                    _this.toastr.error('Please enter a Business Stream Name');
                }
            };
            this.CreateCompany = function () {
                if (_this.company.companyName && _this.company.businessStreamId && _this.company.profileDescription) {
                    if (_this.company.establishmentDate) {
                        _this.company.establishmentDate = new Date(_this.company.establishmentDate.toString());
                    }
                    _this.theHuntClient.createCompany(_this.company).then(function (company) {
                        _this.company = company;
                        _this.toastr.success('You successfully saved a Company');
                    })
                        .catch(function (error) {
                        _this.toastr.error('An error occured ' + error);
                    });
                }
                else {
                    _this.toastr.error('Complete required fields to save a company');
                }
            };
            this.CreateSkillSet = function () {
                if (_this.skillSet.skillSetName) {
                    _this.theHuntClient.createSkillSet(_this.skillSet).then(function (skillSet) {
                        _this.skillSet = skillSet;
                        _this.toastr.success('You successfully saved a SkillSet');
                    })
                        .catch(function (error) {
                        _this.toastr.error('An error occured ' + error);
                    });
                }
                else {
                    _this.toastr.error('SkillSet Name is required');
                }
            };
            this.CreateUserType = function () {
                if (_this.userType.userTypeName) {
                    _this.theHuntClient.createUserType(_this.userType).then(function (userType) {
                        _this.userType = userType;
                        _this.toastr.success('You successfully saved a UserType');
                        _this.theHuntClient.getUserTypes().then(function (userTypes) {
                            _this.userTypes = userTypes;
                        });
                    })
                        .catch(function (error) {
                        _this.toastr.error('An error occured ' + error);
                    });
                }
                else {
                    _this.toastr.error('UserType Name is required');
                }
            };
            this.CreateUserAccount = function () {
                if (_this.userAccount.email && _this.userAccount.userTypeId) {
                    if (_this.userAccount.dateOfBirth) {
                        _this.userAccount.dateOfBirth = new Date(_this.userAccount.dateOfBirth.toString());
                    }
                    _this.userAccount.registrationDate = new Date();
                    _this.userAccount.isActive = true;
                    _this.theHuntClient.createUserAccount(_this.userAccount).then(function (userAccount) {
                        _this.userAccount = userAccount;
                        _this.toastr.success('You successfully saved a User Account');
                    })
                        .catch(function (error) {
                        _this.toastr.error('An error occured ' + error);
                    });
                }
                else {
                    _this.toastr.error('Complete required fields to save a user account');
                }
            };
            this.CreateJobType = function () {
                if (_this.jobType.name) {
                    _this.theHuntClient.createJobType(_this.jobType).then(function (jobType) {
                        _this.jobType = jobType;
                        _this.toastr.success('You successfully saved a Job Type');
                    })
                        .catch(function (error) {
                        _this.toastr.error('An error occured ' + error);
                    });
                }
                else {
                    _this.toastr.error('Complete required fields to save a job type');
                }
            };
            this.CreateJobLocation = function () {
                if (_this.jobLocation.streetAddress && _this.jobLocation.city && _this.jobLocation.state && _this.jobLocation.country && _this.jobLocation.zip) {
                    _this.theHuntClient.createJobLocation(_this.jobLocation).then(function (jobLocation) {
                        _this.jobLocation = jobLocation;
                        _this.toastr.success('You successfully saved a Job Location');
                    })
                        .catch(function (error) {
                        _this.toastr.error('An error occured ' + error);
                    });
                }
                else {
                    _this.toastr.error('Complete required fields to save a job location');
                }
            };
            this.CreateJobPost = function () {
                if (_this.jobPost.companyId && _this.jobPost.jobLocationId && _this.jobPost.jobTypeId && _this.jobPost.postedById && _this.jobPost.jobDescription) {
                    _this.jobPost.createdDate = new Date();
                    if (!_this.jobPost.isCompanyNameHidden) {
                        _this.jobPost.isCompanyNameHidden = false;
                    }
                    if (!_this.jobPost.isActive) {
                        _this.jobPost.isActive = false;
                    }
                    _this.theHuntClient.createJobPost(_this.jobPost).then(function (jobPost) {
                        _this.jobPost = jobPost;
                        _this.toastr.success('You successfully saved a Job Post');
                    })
                        .catch(function (error) {
                        _this.toastr.error('An error occured ' + error);
                    });
                }
                else {
                    _this.toastr.error('Complete required fields to save a job post');
                }
            };
            this.theHuntClient = theHuntClient;
            this.toastr = toastr;
        }
        AdminMetadataController.$inject = ['TheHuntClient', 'toastr'];
        return AdminMetadataController;
    }());
    angular.module('angularApp')
        .component('adminMetadata', AdminMetadata)
        .controller('AdminMetadataController', AdminMetadataController);
})(TheHunt || (TheHunt = {}));