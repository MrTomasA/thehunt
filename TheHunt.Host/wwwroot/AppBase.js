/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.3.5.0 (NJsonSchema v9.4.5.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var TheHunt;
(function (TheHunt) {
    var Client;
    (function (Client) {
        var TheHuntClient = /** @class */ (function () {
            function TheHuntClient($http, $q, baseUrl) {
                this.baseUrl = undefined;
                this.jsonParseReviver = undefined;
                this.http = $http;
                this.q = $q;
                this.baseUrl = baseUrl ? baseUrl : "http://localhost:63585";
            }
            TheHuntClient.prototype.saveBusinessStream = function (businessStream) {
                var _this = this;
                var url_ = this.baseUrl + "/api/Company/business-stream";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(businessStream);
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processSaveBusinessStream(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processSaveBusinessStream(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processSaveBusinessStream = function (response) {
                var status = response.status;
                if (status === 201) {
                    var _responseText = response.data;
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result201 = resultData201 ? BusinessStream.fromJS(resultData201) : null;
                    return this.q.resolve(result201);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.getAllBusinessStreams = function () {
                var _this = this;
                var url_ = this.baseUrl + "/api/Company/business-stream";
                url_ = url_.replace(/[?&]$/, "");
                var options_ = {
                    url: url_,
                    method: "GET",
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processGetAllBusinessStreams(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processGetAllBusinessStreams(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processGetAllBusinessStreams = function (response) {
                var status = response.status;
                if (status === 200) {
                    var _responseText = response.data;
                    var result200 = null;
                    var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    if (resultData200 && resultData200.constructor === Array) {
                        result200 = [];
                        for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                            var item = resultData200_1[_i];
                            result200.push(BusinessStream.fromJS(item));
                        }
                    }
                    return this.q.resolve(result200);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            TheHuntClient.prototype.saveCompany = function (company) {
                var _this = this;
                var url_ = this.baseUrl + "/api/Company";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(company);
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processSaveCompany(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processSaveCompany(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processSaveCompany = function (response) {
                var status = response.status;
                if (status === 201) {
                    var _responseText = response.data;
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result201 = resultData201 ? Company.fromJS(resultData201) : null;
                    return this.q.resolve(result201);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            return TheHuntClient;
        }());
        Client.TheHuntClient = TheHuntClient;
        var BusinessStream = /** @class */ (function () {
            function BusinessStream(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            BusinessStream.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.businessStreamName = data["businessStreamName"] !== undefined ? data["businessStreamName"] : null;
                }
            };
            BusinessStream.fromJS = function (data) {
                var result = new BusinessStream();
                result.init(data);
                return result;
            };
            BusinessStream.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["businessStreamName"] = this.businessStreamName !== undefined ? this.businessStreamName : null;
                return data;
            };
            return BusinessStream;
        }());
        Client.BusinessStream = BusinessStream;
        var Company = /** @class */ (function () {
            function Company(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            Company.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.companyName = data["companyName"] !== undefined ? data["companyName"] : null;
                    this.profileDescription = data["profileDescription"] !== undefined ? data["profileDescription"] : null;
                    this.businessStreamId = data["businessStreamId"] !== undefined ? data["businessStreamId"] : null;
                    this.establishmentDate = data["establishmentDate"] ? new Date(data["establishmentDate"].toString()) : null;
                    this.companyWebsiteUrl = data["companyWebsiteUrl"] !== undefined ? data["companyWebsiteUrl"] : null;
                }
            };
            Company.fromJS = function (data) {
                var result = new Company();
                result.init(data);
                return result;
            };
            Company.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["companyName"] = this.companyName !== undefined ? this.companyName : null;
                data["profileDescription"] = this.profileDescription !== undefined ? this.profileDescription : null;
                data["businessStreamId"] = this.businessStreamId !== undefined ? this.businessStreamId : null;
                data["establishmentDate"] = this.establishmentDate ? this.establishmentDate.toISOString() : null;
                data["companyWebsiteUrl"] = this.companyWebsiteUrl !== undefined ? this.companyWebsiteUrl : null;
                return data;
            };
            return Company;
        }());
        Client.Company = Company;
        var SwaggerException = /** @class */ (function (_super) {
            __extends(SwaggerException, _super);
            function SwaggerException(message, status, response, result) {
                var _this = _super.call(this) || this;
                _this.message = message;
                _this.status = status;
                _this.response = response;
                _this.result = result;
                return _this;
            }
            return SwaggerException;
        }(Error));
        Client.SwaggerException = SwaggerException;
        function throwException(q, message, status, response, result) {
            if (result !== null && result !== undefined)
                return q.reject(result);
            else
                return q.reject(new SwaggerException(message, status, response, null));
        }
        function blobToText(blob, q) {
            return new q(function (resolve) {
                var reader = new FileReader();
                reader.onload = function () {
                    resolve(this.result);
                };
                reader.readAsText(blob);
            });
        }
        // build angular registrations for the client(s)
        var clientClasses = { 'TheHuntClient': TheHuntClient };
        for (var clientClass in clientClasses) {
            if (clientClasses.hasOwnProperty(clientClass)) {
                angular.module('angularApp').service(clientClass, ['$http', '$q', clientClasses[clientClass]]);
            }
        }
    })(Client = TheHunt.Client || (TheHunt.Client = {}));
})(TheHunt || (TheHunt = {}));

var TheHunt;
(function (TheHunt) {
    'use strict';
    var BusinessStream = TheHunt.Client.BusinessStream;
    var Company = TheHunt.Client.Company;
    var AdminMetadata = {
        bindings: {},
        templateUrl: ['paths', function (paths) { return paths.AppBase + "components/admin-metadata/admin-metadata.html"; }],
        controller: 'AdminMetadataController'
    };
    var AdminMetadataController = /** @class */ (function () {
        function AdminMetadataController(theHuntClient, toastr) {
            var _this = this;
            this.$onInit = function () {
                _this.businessStream = new BusinessStream();
                _this.company = new Company();
                _this.businessStreams = [];
                _this.theHuntClient.getAllBusinessStreams().then(function (businessStreams) {
                    _this.businessStreams = businessStreams;
                });
            };
            this.CreateBusinessStream = function () {
                if (_this.businessStream.businessStreamName) {
                    _this.theHuntClient.saveBusinessStream(_this.businessStream).then(function (businessStream) {
                        _this.businessStream = businessStream;
                        _this.toastr.success('You successfully saved a BusinessStream');
                    });
                }
                else {
                    _this.toastr.error('Please enter a Business Stream Name');
                }
            };
            this.CreateCompany = function () {
                if (_this.company.companyName && _this.company.businessStreamId && _this.company.profileDescription) {
                    _this.theHuntClient.saveCompany(_this.company).then(function (company) {
                        _this.company = company;
                        _this.toastr.success('You successfully saved a Company');
                    });
                }
                else {
                    _this.toastr.error('Complete required fields to save a company');
                }
            };
            this.theHuntClient = theHuntClient;
            this.toastr = toastr;
        }
        AdminMetadataController.$inject = ['TheHuntClient', 'toastr'];
        return AdminMetadataController;
    }());
    angular.module('angularApp')
        .component('adminMetadata', AdminMetadata)
        .controller('AdminMetadataController', AdminMetadataController);
})(TheHunt || (TheHunt = {}));