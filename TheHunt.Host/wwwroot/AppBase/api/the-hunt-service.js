/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.3.5.0 (NJsonSchema v9.4.5.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var TheHunt;
(function (TheHunt) {
    var Client;
    (function (Client) {
        var TheHuntClient = /** @class */ (function () {
            function TheHuntClient($http, $q, baseUrl) {
                this.baseUrl = undefined;
                this.jsonParseReviver = undefined;
                this.http = $http;
                this.q = $q;
                this.baseUrl = baseUrl ? baseUrl : "http://localhost:63585";
            }
            TheHuntClient.prototype.saveBusinessStream = function (businessStream) {
                var _this = this;
                var url_ = this.baseUrl + "/api/Company/business-stream";
                url_ = url_.replace(/[?&]$/, "");
                var content_ = JSON.stringify(businessStream);
                var options_ = {
                    url: url_,
                    method: "POST",
                    data: content_,
                    transformResponse: [],
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json"
                    }
                };
                return this.http(options_).then(function (_response) {
                    return _this.processSaveBusinessStream(_response);
                }, function (_response) {
                    if (_response.status)
                        return _this.processSaveBusinessStream(_response);
                    throw _response;
                });
            };
            TheHuntClient.prototype.processSaveBusinessStream = function (response) {
                var status = response.status;
                if (status === 201) {
                    var _responseText = response.data;
                    var result201 = null;
                    var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                    result201 = resultData201 ? BusinessStream.fromJS(resultData201) : null;
                    return this.q.resolve(result201);
                }
                else if (status !== 200 && status !== 204) {
                    var _responseText = response.data;
                    return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
                }
                return this.q.resolve(null);
            };
            return TheHuntClient;
        }());
        Client.TheHuntClient = TheHuntClient;
        var BusinessStream = /** @class */ (function () {
            function BusinessStream(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            BusinessStream.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.businessStreamName = data["businessStreamName"] !== undefined ? data["businessStreamName"] : null;
                    if (data["company"] && data["company"].constructor === Array) {
                        this.company = [];
                        for (var _i = 0, _a = data["company"]; _i < _a.length; _i++) {
                            var item = _a[_i];
                            this.company.push(Company.fromJS(item));
                        }
                    }
                }
            };
            BusinessStream.fromJS = function (data) {
                var result = new BusinessStream();
                result.init(data);
                return result;
            };
            BusinessStream.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["businessStreamName"] = this.businessStreamName !== undefined ? this.businessStreamName : null;
                if (this.company && this.company.constructor === Array) {
                    data["company"] = [];
                    for (var _i = 0, _a = this.company; _i < _a.length; _i++) {
                        var item = _a[_i];
                        data["company"].push(item.toJSON());
                    }
                }
                return data;
            };
            return BusinessStream;
        }());
        Client.BusinessStream = BusinessStream;
        var Company = /** @class */ (function () {
            function Company(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            Company.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.companyName = data["companyName"] !== undefined ? data["companyName"] : null;
                    this.profileDescription = data["profileDescription"] !== undefined ? data["profileDescription"] : null;
                    this.businessStreamId = data["businessStreamId"] !== undefined ? data["businessStreamId"] : null;
                    this.establishmentDate = data["establishmentDate"] ? new Date(data["establishmentDate"].toString()) : null;
                    this.companyWebsiteUrl = data["companyWebsiteUrl"] !== undefined ? data["companyWebsiteUrl"] : null;
                    this.businessStream = data["businessStream"] ? BusinessStream.fromJS(data["businessStream"]) : null;
                    if (data["jobPost"] && data["jobPost"].constructor === Array) {
                        this.jobPost = [];
                        for (var _i = 0, _a = data["jobPost"]; _i < _a.length; _i++) {
                            var item = _a[_i];
                            this.jobPost.push(JobPost.fromJS(item));
                        }
                    }
                }
            };
            Company.fromJS = function (data) {
                var result = new Company();
                result.init(data);
                return result;
            };
            Company.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["companyName"] = this.companyName !== undefined ? this.companyName : null;
                data["profileDescription"] = this.profileDescription !== undefined ? this.profileDescription : null;
                data["businessStreamId"] = this.businessStreamId !== undefined ? this.businessStreamId : null;
                data["establishmentDate"] = this.establishmentDate ? this.establishmentDate.toISOString() : null;
                data["companyWebsiteUrl"] = this.companyWebsiteUrl !== undefined ? this.companyWebsiteUrl : null;
                data["businessStream"] = this.businessStream ? this.businessStream.toJSON() : null;
                if (this.jobPost && this.jobPost.constructor === Array) {
                    data["jobPost"] = [];
                    for (var _i = 0, _a = this.jobPost; _i < _a.length; _i++) {
                        var item = _a[_i];
                        data["jobPost"].push(item.toJSON());
                    }
                }
                return data;
            };
            return Company;
        }());
        Client.Company = Company;
        var JobPost = /** @class */ (function () {
            function JobPost(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            JobPost.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.postedById = data["postedById"] !== undefined ? data["postedById"] : null;
                    this.jobTypeId = data["jobTypeId"] !== undefined ? data["jobTypeId"] : null;
                    this.companyId = data["companyId"] !== undefined ? data["companyId"] : null;
                    this.isCompanyNameHidden = data["isCompanyNameHidden"] !== undefined ? data["isCompanyNameHidden"] : null;
                    this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : null;
                    this.jobDescription = data["jobDescription"] !== undefined ? data["jobDescription"] : null;
                    this.jobLocationId = data["jobLocationId"] !== undefined ? data["jobLocationId"] : null;
                    this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
                    this.company = data["company"] ? Company.fromJS(data["company"]) : null;
                    this.jobLocation = data["jobLocation"] ? JobLocation.fromJS(data["jobLocation"]) : null;
                    this.jobType = data["jobType"] ? JobType.fromJS(data["jobType"]) : null;
                    this.postedBy = data["postedBy"] ? UserAccount.fromJS(data["postedBy"]) : null;
                }
            };
            JobPost.fromJS = function (data) {
                var result = new JobPost();
                result.init(data);
                return result;
            };
            JobPost.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["postedById"] = this.postedById !== undefined ? this.postedById : null;
                data["jobTypeId"] = this.jobTypeId !== undefined ? this.jobTypeId : null;
                data["companyId"] = this.companyId !== undefined ? this.companyId : null;
                data["isCompanyNameHidden"] = this.isCompanyNameHidden !== undefined ? this.isCompanyNameHidden : null;
                data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : null;
                data["jobDescription"] = this.jobDescription !== undefined ? this.jobDescription : null;
                data["jobLocationId"] = this.jobLocationId !== undefined ? this.jobLocationId : null;
                data["isActive"] = this.isActive !== undefined ? this.isActive : null;
                data["company"] = this.company ? this.company.toJSON() : null;
                data["jobLocation"] = this.jobLocation ? this.jobLocation.toJSON() : null;
                data["jobType"] = this.jobType ? this.jobType.toJSON() : null;
                data["postedBy"] = this.postedBy ? this.postedBy.toJSON() : null;
                return data;
            };
            return JobPost;
        }());
        Client.JobPost = JobPost;
        var JobLocation = /** @class */ (function () {
            function JobLocation(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            JobLocation.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.streetAddress = data["streetAddress"] !== undefined ? data["streetAddress"] : null;
                    this.city = data["city"] !== undefined ? data["city"] : null;
                    this.state = data["state"] !== undefined ? data["state"] : null;
                    this.country = data["country"] !== undefined ? data["country"] : null;
                    this.zip = data["zip"] !== undefined ? data["zip"] : null;
                    if (data["jobPost"] && data["jobPost"].constructor === Array) {
                        this.jobPost = [];
                        for (var _i = 0, _a = data["jobPost"]; _i < _a.length; _i++) {
                            var item = _a[_i];
                            this.jobPost.push(JobPost.fromJS(item));
                        }
                    }
                }
            };
            JobLocation.fromJS = function (data) {
                var result = new JobLocation();
                result.init(data);
                return result;
            };
            JobLocation.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["streetAddress"] = this.streetAddress !== undefined ? this.streetAddress : null;
                data["city"] = this.city !== undefined ? this.city : null;
                data["state"] = this.state !== undefined ? this.state : null;
                data["country"] = this.country !== undefined ? this.country : null;
                data["zip"] = this.zip !== undefined ? this.zip : null;
                if (this.jobPost && this.jobPost.constructor === Array) {
                    data["jobPost"] = [];
                    for (var _i = 0, _a = this.jobPost; _i < _a.length; _i++) {
                        var item = _a[_i];
                        data["jobPost"].push(item.toJSON());
                    }
                }
                return data;
            };
            return JobLocation;
        }());
        Client.JobLocation = JobLocation;
        var JobType = /** @class */ (function () {
            function JobType(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            JobType.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.jobType1 = data["jobType1"] !== undefined ? data["jobType1"] : null;
                    if (data["jobPost"] && data["jobPost"].constructor === Array) {
                        this.jobPost = [];
                        for (var _i = 0, _a = data["jobPost"]; _i < _a.length; _i++) {
                            var item = _a[_i];
                            this.jobPost.push(JobPost.fromJS(item));
                        }
                    }
                }
            };
            JobType.fromJS = function (data) {
                var result = new JobType();
                result.init(data);
                return result;
            };
            JobType.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["jobType1"] = this.jobType1 !== undefined ? this.jobType1 : null;
                if (this.jobPost && this.jobPost.constructor === Array) {
                    data["jobPost"] = [];
                    for (var _i = 0, _a = this.jobPost; _i < _a.length; _i++) {
                        var item = _a[_i];
                        data["jobPost"].push(item.toJSON());
                    }
                }
                return data;
            };
            return JobType;
        }());
        Client.JobType = JobType;
        var UserAccount = /** @class */ (function () {
            function UserAccount(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            UserAccount.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.userTypeId = data["userTypeId"] !== undefined ? data["userTypeId"] : null;
                    this.email = data["email"] !== undefined ? data["email"] : null;
                    this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : null;
                    this.gender = data["gender"] !== undefined ? data["gender"] : null;
                    this.isActive = data["isActive"] !== undefined ? data["isActive"] : null;
                    this.contactNumber = data["contactNumber"] !== undefined ? data["contactNumber"] : null;
                    this.emailNotificationActive = data["emailNotificationActive"] !== undefined ? data["emailNotificationActive"] : null;
                    this.registrationDate = data["registrationDate"] ? new Date(data["registrationDate"].toString()) : null;
                    this.userType = data["userType"] ? UserType.fromJS(data["userType"]) : null;
                    this.talentProfile = data["talentProfile"] ? TalentProfile.fromJS(data["talentProfile"]) : null;
                    this.userLog = data["userLog"] ? UserLog.fromJS(data["userLog"]) : null;
                    if (data["educationDetail"] && data["educationDetail"].constructor === Array) {
                        this.educationDetail = [];
                        for (var _i = 0, _a = data["educationDetail"]; _i < _a.length; _i++) {
                            var item = _a[_i];
                            this.educationDetail.push(EducationDetail.fromJS(item));
                        }
                    }
                    if (data["experienceDetails"] && data["experienceDetails"].constructor === Array) {
                        this.experienceDetails = [];
                        for (var _b = 0, _c = data["experienceDetails"]; _b < _c.length; _b++) {
                            var item = _c[_b];
                            this.experienceDetails.push(ExperienceDetails.fromJS(item));
                        }
                    }
                    if (data["jobPost"] && data["jobPost"].constructor === Array) {
                        this.jobPost = [];
                        for (var _d = 0, _e = data["jobPost"]; _d < _e.length; _d++) {
                            var item = _e[_d];
                            this.jobPost.push(JobPost.fromJS(item));
                        }
                    }
                    if (data["jobPostActivity"] && data["jobPostActivity"].constructor === Array) {
                        this.jobPostActivity = [];
                        for (var _f = 0, _g = data["jobPostActivity"]; _f < _g.length; _f++) {
                            var item = _g[_f];
                            this.jobPostActivity.push(JobPostActivity.fromJS(item));
                        }
                    }
                    if (data["talentSkillSet"] && data["talentSkillSet"].constructor === Array) {
                        this.talentSkillSet = [];
                        for (var _h = 0, _j = data["talentSkillSet"]; _h < _j.length; _h++) {
                            var item = _j[_h];
                            this.talentSkillSet.push(TalentSkillSet.fromJS(item));
                        }
                    }
                }
            };
            UserAccount.fromJS = function (data) {
                var result = new UserAccount();
                result.init(data);
                return result;
            };
            UserAccount.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["userTypeId"] = this.userTypeId !== undefined ? this.userTypeId : null;
                data["email"] = this.email !== undefined ? this.email : null;
                data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : null;
                data["gender"] = this.gender !== undefined ? this.gender : null;
                data["isActive"] = this.isActive !== undefined ? this.isActive : null;
                data["contactNumber"] = this.contactNumber !== undefined ? this.contactNumber : null;
                data["emailNotificationActive"] = this.emailNotificationActive !== undefined ? this.emailNotificationActive : null;
                data["registrationDate"] = this.registrationDate ? this.registrationDate.toISOString() : null;
                data["userType"] = this.userType ? this.userType.toJSON() : null;
                data["talentProfile"] = this.talentProfile ? this.talentProfile.toJSON() : null;
                data["userLog"] = this.userLog ? this.userLog.toJSON() : null;
                if (this.educationDetail && this.educationDetail.constructor === Array) {
                    data["educationDetail"] = [];
                    for (var _i = 0, _a = this.educationDetail; _i < _a.length; _i++) {
                        var item = _a[_i];
                        data["educationDetail"].push(item.toJSON());
                    }
                }
                if (this.experienceDetails && this.experienceDetails.constructor === Array) {
                    data["experienceDetails"] = [];
                    for (var _b = 0, _c = this.experienceDetails; _b < _c.length; _b++) {
                        var item = _c[_b];
                        data["experienceDetails"].push(item.toJSON());
                    }
                }
                if (this.jobPost && this.jobPost.constructor === Array) {
                    data["jobPost"] = [];
                    for (var _d = 0, _e = this.jobPost; _d < _e.length; _d++) {
                        var item = _e[_d];
                        data["jobPost"].push(item.toJSON());
                    }
                }
                if (this.jobPostActivity && this.jobPostActivity.constructor === Array) {
                    data["jobPostActivity"] = [];
                    for (var _f = 0, _g = this.jobPostActivity; _f < _g.length; _f++) {
                        var item = _g[_f];
                        data["jobPostActivity"].push(item.toJSON());
                    }
                }
                if (this.talentSkillSet && this.talentSkillSet.constructor === Array) {
                    data["talentSkillSet"] = [];
                    for (var _h = 0, _j = this.talentSkillSet; _h < _j.length; _h++) {
                        var item = _j[_h];
                        data["talentSkillSet"].push(item.toJSON());
                    }
                }
                return data;
            };
            return UserAccount;
        }());
        Client.UserAccount = UserAccount;
        var UserType = /** @class */ (function () {
            function UserType(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            UserType.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.userTypeName = data["userTypeName"] !== undefined ? data["userTypeName"] : null;
                    if (data["userAccount"] && data["userAccount"].constructor === Array) {
                        this.userAccount = [];
                        for (var _i = 0, _a = data["userAccount"]; _i < _a.length; _i++) {
                            var item = _a[_i];
                            this.userAccount.push(UserAccount.fromJS(item));
                        }
                    }
                }
            };
            UserType.fromJS = function (data) {
                var result = new UserType();
                result.init(data);
                return result;
            };
            UserType.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["userTypeName"] = this.userTypeName !== undefined ? this.userTypeName : null;
                if (this.userAccount && this.userAccount.constructor === Array) {
                    data["userAccount"] = [];
                    for (var _i = 0, _a = this.userAccount; _i < _a.length; _i++) {
                        var item = _a[_i];
                        data["userAccount"].push(item.toJSON());
                    }
                }
                return data;
            };
            return UserType;
        }());
        Client.UserType = UserType;
        var TalentProfile = /** @class */ (function () {
            function TalentProfile(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            TalentProfile.prototype.init = function (data) {
                if (data) {
                    this.userAccountId = data["userAccountId"] !== undefined ? data["userAccountId"] : null;
                    this.firstName = data["firstName"] !== undefined ? data["firstName"] : null;
                    this.lastName = data["lastName"] !== undefined ? data["lastName"] : null;
                    this.currentSalary = data["currentSalary"] !== undefined ? data["currentSalary"] : null;
                    this.isAnnuallyMonthly = data["isAnnuallyMonthly"] !== undefined ? data["isAnnuallyMonthly"] : null;
                    this.currency = data["currency"] !== undefined ? data["currency"] : null;
                    this.userAccount = data["userAccount"] ? UserAccount.fromJS(data["userAccount"]) : null;
                }
            };
            TalentProfile.fromJS = function (data) {
                var result = new TalentProfile();
                result.init(data);
                return result;
            };
            TalentProfile.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["userAccountId"] = this.userAccountId !== undefined ? this.userAccountId : null;
                data["firstName"] = this.firstName !== undefined ? this.firstName : null;
                data["lastName"] = this.lastName !== undefined ? this.lastName : null;
                data["currentSalary"] = this.currentSalary !== undefined ? this.currentSalary : null;
                data["isAnnuallyMonthly"] = this.isAnnuallyMonthly !== undefined ? this.isAnnuallyMonthly : null;
                data["currency"] = this.currency !== undefined ? this.currency : null;
                data["userAccount"] = this.userAccount ? this.userAccount.toJSON() : null;
                return data;
            };
            return TalentProfile;
        }());
        Client.TalentProfile = TalentProfile;
        var UserLog = /** @class */ (function () {
            function UserLog(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            UserLog.prototype.init = function (data) {
                if (data) {
                    this.userAccountId = data["userAccountId"] !== undefined ? data["userAccountId"] : null;
                    this.lastLoginDate = data["lastLoginDate"] ? new Date(data["lastLoginDate"].toString()) : null;
                    this.lastJobApplyDate = data["lastJobApplyDate"] ? new Date(data["lastJobApplyDate"].toString()) : null;
                    this.userAccount = data["userAccount"] ? UserAccount.fromJS(data["userAccount"]) : null;
                }
            };
            UserLog.fromJS = function (data) {
                var result = new UserLog();
                result.init(data);
                return result;
            };
            UserLog.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["userAccountId"] = this.userAccountId !== undefined ? this.userAccountId : null;
                data["lastLoginDate"] = this.lastLoginDate ? this.lastLoginDate.toISOString() : null;
                data["lastJobApplyDate"] = this.lastJobApplyDate ? this.lastJobApplyDate.toISOString() : null;
                data["userAccount"] = this.userAccount ? this.userAccount.toJSON() : null;
                return data;
            };
            return UserLog;
        }());
        Client.UserLog = UserLog;
        var EducationDetail = /** @class */ (function () {
            function EducationDetail(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            EducationDetail.prototype.init = function (data) {
                if (data) {
                    this.userAccountId = data["userAccountId"] !== undefined ? data["userAccountId"] : null;
                    this.certificateDegreeName = data["certificateDegreeName"] !== undefined ? data["certificateDegreeName"] : null;
                    this.major = data["major"] !== undefined ? data["major"] : null;
                    this.institueUniversityName = data["institueUniversityName"] !== undefined ? data["institueUniversityName"] : null;
                    this.startingDate = data["startingDate"] ? new Date(data["startingDate"].toString()) : null;
                    this.completionDate = data["completionDate"] ? new Date(data["completionDate"].toString()) : null;
                    this.percentage = data["percentage"] !== undefined ? data["percentage"] : null;
                    this.gpa = data["gpa"] !== undefined ? data["gpa"] : null;
                    this.userAccount = data["userAccount"] ? UserAccount.fromJS(data["userAccount"]) : null;
                }
            };
            EducationDetail.fromJS = function (data) {
                var result = new EducationDetail();
                result.init(data);
                return result;
            };
            EducationDetail.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["userAccountId"] = this.userAccountId !== undefined ? this.userAccountId : null;
                data["certificateDegreeName"] = this.certificateDegreeName !== undefined ? this.certificateDegreeName : null;
                data["major"] = this.major !== undefined ? this.major : null;
                data["institueUniversityName"] = this.institueUniversityName !== undefined ? this.institueUniversityName : null;
                data["startingDate"] = this.startingDate ? this.startingDate.toISOString() : null;
                data["completionDate"] = this.completionDate ? this.completionDate.toISOString() : null;
                data["percentage"] = this.percentage !== undefined ? this.percentage : null;
                data["gpa"] = this.gpa !== undefined ? this.gpa : null;
                data["userAccount"] = this.userAccount ? this.userAccount.toJSON() : null;
                return data;
            };
            return EducationDetail;
        }());
        Client.EducationDetail = EducationDetail;
        var ExperienceDetails = /** @class */ (function () {
            function ExperienceDetails(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            ExperienceDetails.prototype.init = function (data) {
                if (data) {
                    this.userAccountId = data["userAccountId"] !== undefined ? data["userAccountId"] : null;
                    this.isCurrentJob = data["isCurrentJob"] !== undefined ? data["isCurrentJob"] : null;
                    this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : null;
                    this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : null;
                    this.jobTitle = data["jobTitle"] !== undefined ? data["jobTitle"] : null;
                    this.companyName = data["companyName"] !== undefined ? data["companyName"] : null;
                    this.jobLocationCity = data["jobLocationCity"] !== undefined ? data["jobLocationCity"] : null;
                    this.jobLocationState = data["jobLocationState"] !== undefined ? data["jobLocationState"] : null;
                    this.jobLocationCountry = data["jobLocationCountry"] !== undefined ? data["jobLocationCountry"] : null;
                    this.description = data["description"] !== undefined ? data["description"] : null;
                    this.userAccount = data["userAccount"] ? UserAccount.fromJS(data["userAccount"]) : null;
                }
            };
            ExperienceDetails.fromJS = function (data) {
                var result = new ExperienceDetails();
                result.init(data);
                return result;
            };
            ExperienceDetails.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["userAccountId"] = this.userAccountId !== undefined ? this.userAccountId : null;
                data["isCurrentJob"] = this.isCurrentJob !== undefined ? this.isCurrentJob : null;
                data["startDate"] = this.startDate ? this.startDate.toISOString() : null;
                data["endDate"] = this.endDate ? this.endDate.toISOString() : null;
                data["jobTitle"] = this.jobTitle !== undefined ? this.jobTitle : null;
                data["companyName"] = this.companyName !== undefined ? this.companyName : null;
                data["jobLocationCity"] = this.jobLocationCity !== undefined ? this.jobLocationCity : null;
                data["jobLocationState"] = this.jobLocationState !== undefined ? this.jobLocationState : null;
                data["jobLocationCountry"] = this.jobLocationCountry !== undefined ? this.jobLocationCountry : null;
                data["description"] = this.description !== undefined ? this.description : null;
                data["userAccount"] = this.userAccount ? this.userAccount.toJSON() : null;
                return data;
            };
            return ExperienceDetails;
        }());
        Client.ExperienceDetails = ExperienceDetails;
        var JobPostActivity = /** @class */ (function () {
            function JobPostActivity(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            JobPostActivity.prototype.init = function (data) {
                if (data) {
                    this.userAccountId = data["userAccountId"] !== undefined ? data["userAccountId"] : null;
                    this.jostPostId = data["jostPostId"] !== undefined ? data["jostPostId"] : null;
                    this.applyDate = data["applyDate"] ? new Date(data["applyDate"].toString()) : null;
                    this.userAccount = data["userAccount"] ? UserAccount.fromJS(data["userAccount"]) : null;
                }
            };
            JobPostActivity.fromJS = function (data) {
                var result = new JobPostActivity();
                result.init(data);
                return result;
            };
            JobPostActivity.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["userAccountId"] = this.userAccountId !== undefined ? this.userAccountId : null;
                data["jostPostId"] = this.jostPostId !== undefined ? this.jostPostId : null;
                data["applyDate"] = this.applyDate ? this.applyDate.toISOString() : null;
                data["userAccount"] = this.userAccount ? this.userAccount.toJSON() : null;
                return data;
            };
            return JobPostActivity;
        }());
        Client.JobPostActivity = JobPostActivity;
        var TalentSkillSet = /** @class */ (function () {
            function TalentSkillSet(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            TalentSkillSet.prototype.init = function (data) {
                if (data) {
                    this.userAccountId = data["userAccountId"] !== undefined ? data["userAccountId"] : null;
                    this.skillSetId = data["skillSetId"] !== undefined ? data["skillSetId"] : null;
                    this.skillLevel = data["skillLevel"] !== undefined ? data["skillLevel"] : null;
                    this.skillSet = data["skillSet"] ? SkillSet.fromJS(data["skillSet"]) : null;
                    this.userAccount = data["userAccount"] ? UserAccount.fromJS(data["userAccount"]) : null;
                }
            };
            TalentSkillSet.fromJS = function (data) {
                var result = new TalentSkillSet();
                result.init(data);
                return result;
            };
            TalentSkillSet.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["userAccountId"] = this.userAccountId !== undefined ? this.userAccountId : null;
                data["skillSetId"] = this.skillSetId !== undefined ? this.skillSetId : null;
                data["skillLevel"] = this.skillLevel !== undefined ? this.skillLevel : null;
                data["skillSet"] = this.skillSet ? this.skillSet.toJSON() : null;
                data["userAccount"] = this.userAccount ? this.userAccount.toJSON() : null;
                return data;
            };
            return TalentSkillSet;
        }());
        Client.TalentSkillSet = TalentSkillSet;
        var SkillSet = /** @class */ (function () {
            function SkillSet(data) {
                if (data) {
                    for (var property in data) {
                        if (data.hasOwnProperty(property))
                            this[property] = data[property];
                    }
                }
            }
            SkillSet.prototype.init = function (data) {
                if (data) {
                    this.id = data["id"] !== undefined ? data["id"] : null;
                    this.skillSetName = data["skillSetName"] !== undefined ? data["skillSetName"] : null;
                    if (data["talentSkillSet"] && data["talentSkillSet"].constructor === Array) {
                        this.talentSkillSet = [];
                        for (var _i = 0, _a = data["talentSkillSet"]; _i < _a.length; _i++) {
                            var item = _a[_i];
                            this.talentSkillSet.push(TalentSkillSet.fromJS(item));
                        }
                    }
                }
            };
            SkillSet.fromJS = function (data) {
                var result = new SkillSet();
                result.init(data);
                return result;
            };
            SkillSet.prototype.toJSON = function (data) {
                data = typeof data === 'object' ? data : {};
                data["id"] = this.id !== undefined ? this.id : null;
                data["skillSetName"] = this.skillSetName !== undefined ? this.skillSetName : null;
                if (this.talentSkillSet && this.talentSkillSet.constructor === Array) {
                    data["talentSkillSet"] = [];
                    for (var _i = 0, _a = this.talentSkillSet; _i < _a.length; _i++) {
                        var item = _a[_i];
                        data["talentSkillSet"].push(item.toJSON());
                    }
                }
                return data;
            };
            return SkillSet;
        }());
        Client.SkillSet = SkillSet;
        var SwaggerException = /** @class */ (function (_super) {
            __extends(SwaggerException, _super);
            function SwaggerException(message, status, response, result) {
                var _this = _super.call(this) || this;
                _this.message = message;
                _this.status = status;
                _this.response = response;
                _this.result = result;
                return _this;
            }
            return SwaggerException;
        }(Error));
        Client.SwaggerException = SwaggerException;
        function throwException(q, message, status, response, result) {
            if (result !== null && result !== undefined)
                return q.reject(result);
            else
                return q.reject(new SwaggerException(message, status, response, null));
        }
        function blobToText(blob, q) {
            return new q(function (resolve) {
                var reader = new FileReader();
                reader.onload = function () {
                    resolve(this.result);
                };
                reader.readAsText(blob);
            });
        }
        // build angular registrations for the client(s)
        var clientClasses = { 'TheHuntClient': TheHuntClient };
        for (var clientClass in clientClasses) {
            if (clientClasses.hasOwnProperty(clientClass)) {
                angular.module('angularApp').service(clientClass, ['$http', '$q', clientClasses[clientClass]]);
            }
        }
    })(Client = TheHunt.Client || (TheHunt.Client = {}));
})(TheHunt || (TheHunt = {}));
