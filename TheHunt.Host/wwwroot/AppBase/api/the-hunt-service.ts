/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.3.5.0 (NJsonSchema v9.4.5.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

namespace TheHunt.Client {

export interface ITheHuntClient {
    saveBusinessStream(businessStream: BusinessStream): ng.IPromise<BusinessStream | null>;
}

export class TheHuntClient implements ITheHuntClient {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor($http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:63585";
    }

    saveBusinessStream(businessStream: BusinessStream): ng.IPromise<BusinessStream | null> {
        let url_ = this.baseUrl + "/api/Company";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(businessStream);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processSaveBusinessStream(_response);
        }, (_response) => {
            if (_response.status)
                return this.processSaveBusinessStream(_response);
            throw _response;
        });
    }

    protected processSaveBusinessStream(response: any): ng.IPromise<BusinessStream | null> {
        const status = response.status; 

        if (status === 201) {
            const _responseText = response.data;
            let result201: BusinessStream | null = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? BusinessStream.fromJS(resultData201) : <any>null;
            return this.q.resolve(result201);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
        }
        return this.q.resolve<BusinessStream | null>(<any>null);
    }
}

export class BusinessStream implements IBusinessStream {
    id: number;
    businessStreamName?: string | null;
    company?: Company[] | null;

    constructor(data?: IBusinessStream) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.businessStreamName = data["businessStreamName"] !== undefined ? data["businessStreamName"] : <any>null;
            if (data["company"] && data["company"].constructor === Array) {
                this.company = [];
                for (let item of data["company"])
                    this.company.push(Company.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BusinessStream {
        let result = new BusinessStream();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["businessStreamName"] = this.businessStreamName !== undefined ? this.businessStreamName : <any>null;
        if (this.company && this.company.constructor === Array) {
            data["company"] = [];
            for (let item of this.company)
                data["company"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IBusinessStream {
    id: number;
    businessStreamName?: string | null;
    company?: Company[] | null;
}

export class Company implements ICompany {
    id: number;
    companyName?: string | null;
    profileDescription?: string | null;
    businessStreamId: number;
    establishmentDate?: Date | null;
    companyWebsiteUrl?: string | null;
    businessStream?: BusinessStream | null;
    jobPost?: JobPost[] | null;

    constructor(data?: ICompany) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.companyName = data["companyName"] !== undefined ? data["companyName"] : <any>null;
            this.profileDescription = data["profileDescription"] !== undefined ? data["profileDescription"] : <any>null;
            this.businessStreamId = data["businessStreamId"] !== undefined ? data["businessStreamId"] : <any>null;
            this.establishmentDate = data["establishmentDate"] ? new Date(data["establishmentDate"].toString()) : <any>null;
            this.companyWebsiteUrl = data["companyWebsiteUrl"] !== undefined ? data["companyWebsiteUrl"] : <any>null;
            this.businessStream = data["businessStream"] ? BusinessStream.fromJS(data["businessStream"]) : <any>null;
            if (data["jobPost"] && data["jobPost"].constructor === Array) {
                this.jobPost = [];
                for (let item of data["jobPost"])
                    this.jobPost.push(JobPost.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Company {
        let result = new Company();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["profileDescription"] = this.profileDescription !== undefined ? this.profileDescription : <any>null;
        data["businessStreamId"] = this.businessStreamId !== undefined ? this.businessStreamId : <any>null;
        data["establishmentDate"] = this.establishmentDate ? this.establishmentDate.toISOString() : <any>null;
        data["companyWebsiteUrl"] = this.companyWebsiteUrl !== undefined ? this.companyWebsiteUrl : <any>null;
        data["businessStream"] = this.businessStream ? this.businessStream.toJSON() : <any>null;
        if (this.jobPost && this.jobPost.constructor === Array) {
            data["jobPost"] = [];
            for (let item of this.jobPost)
                data["jobPost"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICompany {
    id: number;
    companyName?: string | null;
    profileDescription?: string | null;
    businessStreamId: number;
    establishmentDate?: Date | null;
    companyWebsiteUrl?: string | null;
    businessStream?: BusinessStream | null;
    jobPost?: JobPost[] | null;
}

export class JobPost implements IJobPost {
    id: number;
    postedById: number;
    jobTypeId: number;
    companyId: number;
    isCompanyNameHidden: boolean;
    createdDate: Date;
    jobDescription?: string | null;
    jobLocationId: number;
    isActive: boolean;
    company?: Company | null;
    jobLocation?: JobLocation | null;
    jobType?: JobType | null;
    postedBy?: UserAccount | null;

    constructor(data?: IJobPost) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.postedById = data["postedById"] !== undefined ? data["postedById"] : <any>null;
            this.jobTypeId = data["jobTypeId"] !== undefined ? data["jobTypeId"] : <any>null;
            this.companyId = data["companyId"] !== undefined ? data["companyId"] : <any>null;
            this.isCompanyNameHidden = data["isCompanyNameHidden"] !== undefined ? data["isCompanyNameHidden"] : <any>null;
            this.createdDate = data["createdDate"] ? new Date(data["createdDate"].toString()) : <any>null;
            this.jobDescription = data["jobDescription"] !== undefined ? data["jobDescription"] : <any>null;
            this.jobLocationId = data["jobLocationId"] !== undefined ? data["jobLocationId"] : <any>null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : <any>null;
            this.company = data["company"] ? Company.fromJS(data["company"]) : <any>null;
            this.jobLocation = data["jobLocation"] ? JobLocation.fromJS(data["jobLocation"]) : <any>null;
            this.jobType = data["jobType"] ? JobType.fromJS(data["jobType"]) : <any>null;
            this.postedBy = data["postedBy"] ? UserAccount.fromJS(data["postedBy"]) : <any>null;
        }
    }

    static fromJS(data: any): JobPost {
        let result = new JobPost();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["postedById"] = this.postedById !== undefined ? this.postedById : <any>null;
        data["jobTypeId"] = this.jobTypeId !== undefined ? this.jobTypeId : <any>null;
        data["companyId"] = this.companyId !== undefined ? this.companyId : <any>null;
        data["isCompanyNameHidden"] = this.isCompanyNameHidden !== undefined ? this.isCompanyNameHidden : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["jobDescription"] = this.jobDescription !== undefined ? this.jobDescription : <any>null;
        data["jobLocationId"] = this.jobLocationId !== undefined ? this.jobLocationId : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["company"] = this.company ? this.company.toJSON() : <any>null;
        data["jobLocation"] = this.jobLocation ? this.jobLocation.toJSON() : <any>null;
        data["jobType"] = this.jobType ? this.jobType.toJSON() : <any>null;
        data["postedBy"] = this.postedBy ? this.postedBy.toJSON() : <any>null;
        return data; 
    }
}

export interface IJobPost {
    id: number;
    postedById: number;
    jobTypeId: number;
    companyId: number;
    isCompanyNameHidden: boolean;
    createdDate: Date;
    jobDescription?: string | null;
    jobLocationId: number;
    isActive: boolean;
    company?: Company | null;
    jobLocation?: JobLocation | null;
    jobType?: JobType | null;
    postedBy?: UserAccount | null;
}

export class JobLocation implements IJobLocation {
    id: number;
    streetAddress?: string | null;
    city?: string | null;
    state?: string | null;
    country?: string | null;
    zip?: string | null;
    jobPost?: JobPost[] | null;

    constructor(data?: IJobLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.streetAddress = data["streetAddress"] !== undefined ? data["streetAddress"] : <any>null;
            this.city = data["city"] !== undefined ? data["city"] : <any>null;
            this.state = data["state"] !== undefined ? data["state"] : <any>null;
            this.country = data["country"] !== undefined ? data["country"] : <any>null;
            this.zip = data["zip"] !== undefined ? data["zip"] : <any>null;
            if (data["jobPost"] && data["jobPost"].constructor === Array) {
                this.jobPost = [];
                for (let item of data["jobPost"])
                    this.jobPost.push(JobPost.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JobLocation {
        let result = new JobLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["streetAddress"] = this.streetAddress !== undefined ? this.streetAddress : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["zip"] = this.zip !== undefined ? this.zip : <any>null;
        if (this.jobPost && this.jobPost.constructor === Array) {
            data["jobPost"] = [];
            for (let item of this.jobPost)
                data["jobPost"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IJobLocation {
    id: number;
    streetAddress?: string | null;
    city?: string | null;
    state?: string | null;
    country?: string | null;
    zip?: string | null;
    jobPost?: JobPost[] | null;
}

export class JobType implements IJobType {
    id: number;
    jobType1?: string | null;
    jobPost?: JobPost[] | null;

    constructor(data?: IJobType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.jobType1 = data["jobType1"] !== undefined ? data["jobType1"] : <any>null;
            if (data["jobPost"] && data["jobPost"].constructor === Array) {
                this.jobPost = [];
                for (let item of data["jobPost"])
                    this.jobPost.push(JobPost.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JobType {
        let result = new JobType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["jobType1"] = this.jobType1 !== undefined ? this.jobType1 : <any>null;
        if (this.jobPost && this.jobPost.constructor === Array) {
            data["jobPost"] = [];
            for (let item of this.jobPost)
                data["jobPost"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IJobType {
    id: number;
    jobType1?: string | null;
    jobPost?: JobPost[] | null;
}

export class UserAccount implements IUserAccount {
    id: number;
    userTypeId: number;
    email?: string | null;
    dateOfBirth?: Date | null;
    gender?: string | null;
    isActive: boolean;
    contactNumber?: string | null;
    emailNotificationActive?: boolean | null;
    registrationDate: Date;
    userType?: UserType | null;
    talentProfile?: TalentProfile | null;
    userLog?: UserLog | null;
    educationDetail?: EducationDetail[] | null;
    experienceDetails?: ExperienceDetails[] | null;
    jobPost?: JobPost[] | null;
    jobPostActivity?: JobPostActivity[] | null;
    talentSkillSet?: TalentSkillSet[] | null;

    constructor(data?: IUserAccount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.userTypeId = data["userTypeId"] !== undefined ? data["userTypeId"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : <any>null;
            this.gender = data["gender"] !== undefined ? data["gender"] : <any>null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : <any>null;
            this.contactNumber = data["contactNumber"] !== undefined ? data["contactNumber"] : <any>null;
            this.emailNotificationActive = data["emailNotificationActive"] !== undefined ? data["emailNotificationActive"] : <any>null;
            this.registrationDate = data["registrationDate"] ? new Date(data["registrationDate"].toString()) : <any>null;
            this.userType = data["userType"] ? UserType.fromJS(data["userType"]) : <any>null;
            this.talentProfile = data["talentProfile"] ? TalentProfile.fromJS(data["talentProfile"]) : <any>null;
            this.userLog = data["userLog"] ? UserLog.fromJS(data["userLog"]) : <any>null;
            if (data["educationDetail"] && data["educationDetail"].constructor === Array) {
                this.educationDetail = [];
                for (let item of data["educationDetail"])
                    this.educationDetail.push(EducationDetail.fromJS(item));
            }
            if (data["experienceDetails"] && data["experienceDetails"].constructor === Array) {
                this.experienceDetails = [];
                for (let item of data["experienceDetails"])
                    this.experienceDetails.push(ExperienceDetails.fromJS(item));
            }
            if (data["jobPost"] && data["jobPost"].constructor === Array) {
                this.jobPost = [];
                for (let item of data["jobPost"])
                    this.jobPost.push(JobPost.fromJS(item));
            }
            if (data["jobPostActivity"] && data["jobPostActivity"].constructor === Array) {
                this.jobPostActivity = [];
                for (let item of data["jobPostActivity"])
                    this.jobPostActivity.push(JobPostActivity.fromJS(item));
            }
            if (data["talentSkillSet"] && data["talentSkillSet"].constructor === Array) {
                this.talentSkillSet = [];
                for (let item of data["talentSkillSet"])
                    this.talentSkillSet.push(TalentSkillSet.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserAccount {
        let result = new UserAccount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userTypeId"] = this.userTypeId !== undefined ? this.userTypeId : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["contactNumber"] = this.contactNumber !== undefined ? this.contactNumber : <any>null;
        data["emailNotificationActive"] = this.emailNotificationActive !== undefined ? this.emailNotificationActive : <any>null;
        data["registrationDate"] = this.registrationDate ? this.registrationDate.toISOString() : <any>null;
        data["userType"] = this.userType ? this.userType.toJSON() : <any>null;
        data["talentProfile"] = this.talentProfile ? this.talentProfile.toJSON() : <any>null;
        data["userLog"] = this.userLog ? this.userLog.toJSON() : <any>null;
        if (this.educationDetail && this.educationDetail.constructor === Array) {
            data["educationDetail"] = [];
            for (let item of this.educationDetail)
                data["educationDetail"].push(item.toJSON());
        }
        if (this.experienceDetails && this.experienceDetails.constructor === Array) {
            data["experienceDetails"] = [];
            for (let item of this.experienceDetails)
                data["experienceDetails"].push(item.toJSON());
        }
        if (this.jobPost && this.jobPost.constructor === Array) {
            data["jobPost"] = [];
            for (let item of this.jobPost)
                data["jobPost"].push(item.toJSON());
        }
        if (this.jobPostActivity && this.jobPostActivity.constructor === Array) {
            data["jobPostActivity"] = [];
            for (let item of this.jobPostActivity)
                data["jobPostActivity"].push(item.toJSON());
        }
        if (this.talentSkillSet && this.talentSkillSet.constructor === Array) {
            data["talentSkillSet"] = [];
            for (let item of this.talentSkillSet)
                data["talentSkillSet"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserAccount {
    id: number;
    userTypeId: number;
    email?: string | null;
    dateOfBirth?: Date | null;
    gender?: string | null;
    isActive: boolean;
    contactNumber?: string | null;
    emailNotificationActive?: boolean | null;
    registrationDate: Date;
    userType?: UserType | null;
    talentProfile?: TalentProfile | null;
    userLog?: UserLog | null;
    educationDetail?: EducationDetail[] | null;
    experienceDetails?: ExperienceDetails[] | null;
    jobPost?: JobPost[] | null;
    jobPostActivity?: JobPostActivity[] | null;
    talentSkillSet?: TalentSkillSet[] | null;
}

export class UserType implements IUserType {
    id: number;
    userTypeName?: string | null;
    userAccount?: UserAccount[] | null;

    constructor(data?: IUserType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.userTypeName = data["userTypeName"] !== undefined ? data["userTypeName"] : <any>null;
            if (data["userAccount"] && data["userAccount"].constructor === Array) {
                this.userAccount = [];
                for (let item of data["userAccount"])
                    this.userAccount.push(UserAccount.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserType {
        let result = new UserType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userTypeName"] = this.userTypeName !== undefined ? this.userTypeName : <any>null;
        if (this.userAccount && this.userAccount.constructor === Array) {
            data["userAccount"] = [];
            for (let item of this.userAccount)
                data["userAccount"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserType {
    id: number;
    userTypeName?: string | null;
    userAccount?: UserAccount[] | null;
}

export class TalentProfile implements ITalentProfile {
    userAccountId: number;
    firstName?: string | null;
    lastName?: string | null;
    currentSalary?: number | null;
    isAnnuallyMonthly?: boolean | null;
    currency?: string | null;
    userAccount?: UserAccount | null;

    constructor(data?: ITalentProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userAccountId = data["userAccountId"] !== undefined ? data["userAccountId"] : <any>null;
            this.firstName = data["firstName"] !== undefined ? data["firstName"] : <any>null;
            this.lastName = data["lastName"] !== undefined ? data["lastName"] : <any>null;
            this.currentSalary = data["currentSalary"] !== undefined ? data["currentSalary"] : <any>null;
            this.isAnnuallyMonthly = data["isAnnuallyMonthly"] !== undefined ? data["isAnnuallyMonthly"] : <any>null;
            this.currency = data["currency"] !== undefined ? data["currency"] : <any>null;
            this.userAccount = data["userAccount"] ? UserAccount.fromJS(data["userAccount"]) : <any>null;
        }
    }

    static fromJS(data: any): TalentProfile {
        let result = new TalentProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userAccountId"] = this.userAccountId !== undefined ? this.userAccountId : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["currentSalary"] = this.currentSalary !== undefined ? this.currentSalary : <any>null;
        data["isAnnuallyMonthly"] = this.isAnnuallyMonthly !== undefined ? this.isAnnuallyMonthly : <any>null;
        data["currency"] = this.currency !== undefined ? this.currency : <any>null;
        data["userAccount"] = this.userAccount ? this.userAccount.toJSON() : <any>null;
        return data; 
    }
}

export interface ITalentProfile {
    userAccountId: number;
    firstName?: string | null;
    lastName?: string | null;
    currentSalary?: number | null;
    isAnnuallyMonthly?: boolean | null;
    currency?: string | null;
    userAccount?: UserAccount | null;
}

export class UserLog implements IUserLog {
    userAccountId: number;
    lastLoginDate?: Date | null;
    lastJobApplyDate?: Date | null;
    userAccount?: UserAccount | null;

    constructor(data?: IUserLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userAccountId = data["userAccountId"] !== undefined ? data["userAccountId"] : <any>null;
            this.lastLoginDate = data["lastLoginDate"] ? new Date(data["lastLoginDate"].toString()) : <any>null;
            this.lastJobApplyDate = data["lastJobApplyDate"] ? new Date(data["lastJobApplyDate"].toString()) : <any>null;
            this.userAccount = data["userAccount"] ? UserAccount.fromJS(data["userAccount"]) : <any>null;
        }
    }

    static fromJS(data: any): UserLog {
        let result = new UserLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userAccountId"] = this.userAccountId !== undefined ? this.userAccountId : <any>null;
        data["lastLoginDate"] = this.lastLoginDate ? this.lastLoginDate.toISOString() : <any>null;
        data["lastJobApplyDate"] = this.lastJobApplyDate ? this.lastJobApplyDate.toISOString() : <any>null;
        data["userAccount"] = this.userAccount ? this.userAccount.toJSON() : <any>null;
        return data; 
    }
}

export interface IUserLog {
    userAccountId: number;
    lastLoginDate?: Date | null;
    lastJobApplyDate?: Date | null;
    userAccount?: UserAccount | null;
}

export class EducationDetail implements IEducationDetail {
    userAccountId: number;
    certificateDegreeName?: string | null;
    major?: string | null;
    institueUniversityName?: string | null;
    startingDate: Date;
    completionDate: Date;
    percentage?: number | null;
    gpa: number;
    userAccount?: UserAccount | null;

    constructor(data?: IEducationDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userAccountId = data["userAccountId"] !== undefined ? data["userAccountId"] : <any>null;
            this.certificateDegreeName = data["certificateDegreeName"] !== undefined ? data["certificateDegreeName"] : <any>null;
            this.major = data["major"] !== undefined ? data["major"] : <any>null;
            this.institueUniversityName = data["institueUniversityName"] !== undefined ? data["institueUniversityName"] : <any>null;
            this.startingDate = data["startingDate"] ? new Date(data["startingDate"].toString()) : <any>null;
            this.completionDate = data["completionDate"] ? new Date(data["completionDate"].toString()) : <any>null;
            this.percentage = data["percentage"] !== undefined ? data["percentage"] : <any>null;
            this.gpa = data["gpa"] !== undefined ? data["gpa"] : <any>null;
            this.userAccount = data["userAccount"] ? UserAccount.fromJS(data["userAccount"]) : <any>null;
        }
    }

    static fromJS(data: any): EducationDetail {
        let result = new EducationDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userAccountId"] = this.userAccountId !== undefined ? this.userAccountId : <any>null;
        data["certificateDegreeName"] = this.certificateDegreeName !== undefined ? this.certificateDegreeName : <any>null;
        data["major"] = this.major !== undefined ? this.major : <any>null;
        data["institueUniversityName"] = this.institueUniversityName !== undefined ? this.institueUniversityName : <any>null;
        data["startingDate"] = this.startingDate ? this.startingDate.toISOString() : <any>null;
        data["completionDate"] = this.completionDate ? this.completionDate.toISOString() : <any>null;
        data["percentage"] = this.percentage !== undefined ? this.percentage : <any>null;
        data["gpa"] = this.gpa !== undefined ? this.gpa : <any>null;
        data["userAccount"] = this.userAccount ? this.userAccount.toJSON() : <any>null;
        return data; 
    }
}

export interface IEducationDetail {
    userAccountId: number;
    certificateDegreeName?: string | null;
    major?: string | null;
    institueUniversityName?: string | null;
    startingDate: Date;
    completionDate: Date;
    percentage?: number | null;
    gpa: number;
    userAccount?: UserAccount | null;
}

export class ExperienceDetails implements IExperienceDetails {
    userAccountId: number;
    isCurrentJob: boolean;
    startDate: Date;
    endDate: Date;
    jobTitle?: string | null;
    companyName?: string | null;
    jobLocationCity?: string | null;
    jobLocationState?: string | null;
    jobLocationCountry?: string | null;
    description?: string | null;
    userAccount?: UserAccount | null;

    constructor(data?: IExperienceDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userAccountId = data["userAccountId"] !== undefined ? data["userAccountId"] : <any>null;
            this.isCurrentJob = data["isCurrentJob"] !== undefined ? data["isCurrentJob"] : <any>null;
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : <any>null;
            this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : <any>null;
            this.jobTitle = data["jobTitle"] !== undefined ? data["jobTitle"] : <any>null;
            this.companyName = data["companyName"] !== undefined ? data["companyName"] : <any>null;
            this.jobLocationCity = data["jobLocationCity"] !== undefined ? data["jobLocationCity"] : <any>null;
            this.jobLocationState = data["jobLocationState"] !== undefined ? data["jobLocationState"] : <any>null;
            this.jobLocationCountry = data["jobLocationCountry"] !== undefined ? data["jobLocationCountry"] : <any>null;
            this.description = data["description"] !== undefined ? data["description"] : <any>null;
            this.userAccount = data["userAccount"] ? UserAccount.fromJS(data["userAccount"]) : <any>null;
        }
    }

    static fromJS(data: any): ExperienceDetails {
        let result = new ExperienceDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userAccountId"] = this.userAccountId !== undefined ? this.userAccountId : <any>null;
        data["isCurrentJob"] = this.isCurrentJob !== undefined ? this.isCurrentJob : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["jobTitle"] = this.jobTitle !== undefined ? this.jobTitle : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["jobLocationCity"] = this.jobLocationCity !== undefined ? this.jobLocationCity : <any>null;
        data["jobLocationState"] = this.jobLocationState !== undefined ? this.jobLocationState : <any>null;
        data["jobLocationCountry"] = this.jobLocationCountry !== undefined ? this.jobLocationCountry : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["userAccount"] = this.userAccount ? this.userAccount.toJSON() : <any>null;
        return data; 
    }
}

export interface IExperienceDetails {
    userAccountId: number;
    isCurrentJob: boolean;
    startDate: Date;
    endDate: Date;
    jobTitle?: string | null;
    companyName?: string | null;
    jobLocationCity?: string | null;
    jobLocationState?: string | null;
    jobLocationCountry?: string | null;
    description?: string | null;
    userAccount?: UserAccount | null;
}

export class JobPostActivity implements IJobPostActivity {
    userAccountId: number;
    jostPostId: number;
    applyDate?: Date | null;
    userAccount?: UserAccount | null;

    constructor(data?: IJobPostActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userAccountId = data["userAccountId"] !== undefined ? data["userAccountId"] : <any>null;
            this.jostPostId = data["jostPostId"] !== undefined ? data["jostPostId"] : <any>null;
            this.applyDate = data["applyDate"] ? new Date(data["applyDate"].toString()) : <any>null;
            this.userAccount = data["userAccount"] ? UserAccount.fromJS(data["userAccount"]) : <any>null;
        }
    }

    static fromJS(data: any): JobPostActivity {
        let result = new JobPostActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userAccountId"] = this.userAccountId !== undefined ? this.userAccountId : <any>null;
        data["jostPostId"] = this.jostPostId !== undefined ? this.jostPostId : <any>null;
        data["applyDate"] = this.applyDate ? this.applyDate.toISOString() : <any>null;
        data["userAccount"] = this.userAccount ? this.userAccount.toJSON() : <any>null;
        return data; 
    }
}

export interface IJobPostActivity {
    userAccountId: number;
    jostPostId: number;
    applyDate?: Date | null;
    userAccount?: UserAccount | null;
}

export class TalentSkillSet implements ITalentSkillSet {
    userAccountId: number;
    skillSetId: number;
    skillLevel: number;
    skillSet?: SkillSet | null;
    userAccount?: UserAccount | null;

    constructor(data?: ITalentSkillSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userAccountId = data["userAccountId"] !== undefined ? data["userAccountId"] : <any>null;
            this.skillSetId = data["skillSetId"] !== undefined ? data["skillSetId"] : <any>null;
            this.skillLevel = data["skillLevel"] !== undefined ? data["skillLevel"] : <any>null;
            this.skillSet = data["skillSet"] ? SkillSet.fromJS(data["skillSet"]) : <any>null;
            this.userAccount = data["userAccount"] ? UserAccount.fromJS(data["userAccount"]) : <any>null;
        }
    }

    static fromJS(data: any): TalentSkillSet {
        let result = new TalentSkillSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userAccountId"] = this.userAccountId !== undefined ? this.userAccountId : <any>null;
        data["skillSetId"] = this.skillSetId !== undefined ? this.skillSetId : <any>null;
        data["skillLevel"] = this.skillLevel !== undefined ? this.skillLevel : <any>null;
        data["skillSet"] = this.skillSet ? this.skillSet.toJSON() : <any>null;
        data["userAccount"] = this.userAccount ? this.userAccount.toJSON() : <any>null;
        return data; 
    }
}

export interface ITalentSkillSet {
    userAccountId: number;
    skillSetId: number;
    skillLevel: number;
    skillSet?: SkillSet | null;
    userAccount?: UserAccount | null;
}

export class SkillSet implements ISkillSet {
    id: number;
    skillSetName?: string | null;
    talentSkillSet?: TalentSkillSet[] | null;

    constructor(data?: ISkillSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.skillSetName = data["skillSetName"] !== undefined ? data["skillSetName"] : <any>null;
            if (data["talentSkillSet"] && data["talentSkillSet"].constructor === Array) {
                this.talentSkillSet = [];
                for (let item of data["talentSkillSet"])
                    this.talentSkillSet.push(TalentSkillSet.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SkillSet {
        let result = new SkillSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["skillSetName"] = this.skillSetName !== undefined ? this.skillSetName : <any>null;
        if (this.talentSkillSet && this.talentSkillSet.constructor === Array) {
            data["talentSkillSet"] = [];
            for (let item of this.talentSkillSet)
                data["talentSkillSet"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISkillSet {
    id: number;
    skillSetName?: string | null;
    talentSkillSet?: TalentSkillSet[] | null;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(q: ng.IQService, message: string, status: number, response: string, result?: any): ng.IPromise<any> {
    if(result !== null && result !== undefined)
        return q.reject(result);
    else
        return q.reject(new SwaggerException(message, status, response, null));
}

function blobToText(blob: Blob, q: ng.IQService): ng.IPromise<string> {
    return new q((resolve) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            resolve(this.result);
        }
        reader.readAsText(blob); 
    });
}

// build angular registrations for the client(s)
let clientClasses = {'TheHuntClient': TheHuntClient};

for (let clientClass in clientClasses) {
    if (clientClasses.hasOwnProperty(clientClass)) {
        angular.module('angularApp').service(clientClass, ['$http', '$q', clientClasses[clientClass]]);
    }
}
}