/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.3.5.0 (NJsonSchema v9.4.5.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

namespace TheHunt.Client {

export interface ITheHuntClient {
    createBusinessStream(businessStream: BusinessStream): ng.IPromise<BusinessStream | null>;
    getBusinessStreams(): ng.IPromise<BusinessStream[] | null>;
    createCompany(company: Company): ng.IPromise<Company | null>;
    createSkillSet(skillSet: SkillSet): ng.IPromise<BusinessStream | null>;
    getUserTypes(): ng.IPromise<UserType[] | null>;
    createUserType(userType: UserType): ng.IPromise<UserType | null>;
    createUserLog(userLog: UserLog): ng.IPromise<UserLog | null>;
    createUserAccount(userAccount: UserAccount): ng.IPromise<UserAccount | null>;
}

export class TheHuntClient implements ITheHuntClient {
    private baseUrl: string | undefined = undefined; 
    private http: ng.IHttpService; 
    private q: ng.IQService; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor($http: ng.IHttpService, $q: ng.IQService, baseUrl?: string) {
        this.http = $http;
        this.q = $q;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:63585";
    }

    createBusinessStream(businessStream: BusinessStream): ng.IPromise<BusinessStream | null> {
        let url_ = this.baseUrl + "/api/Company/business-stream";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(businessStream);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processCreateBusinessStream(_response);
        }, (_response) => {
            if (_response.status)
                return this.processCreateBusinessStream(_response);
            throw _response;
        });
    }

    protected processCreateBusinessStream(response: any): ng.IPromise<BusinessStream | null> {
        const status = response.status; 

        if (status === 201) {
            const _responseText = response.data;
            let result201: BusinessStream | null = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? BusinessStream.fromJS(resultData201) : <any>null;
            return this.q.resolve(result201);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
        }
        return this.q.resolve<BusinessStream | null>(<any>null);
    }

    getBusinessStreams(): ng.IPromise<BusinessStream[] | null> {
        let url_ = this.baseUrl + "/api/Company/business-stream";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processGetBusinessStreams(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetBusinessStreams(_response);
            throw _response;
        });
    }

    protected processGetBusinessStreams(response: any): ng.IPromise<BusinessStream[] | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.data;
            let result200: BusinessStream[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(BusinessStream.fromJS(item));
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
        }
        return this.q.resolve<BusinessStream[] | null>(<any>null);
    }

    createCompany(company: Company): ng.IPromise<Company | null> {
        let url_ = this.baseUrl + "/api/Company";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(company);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processCreateCompany(_response);
        }, (_response) => {
            if (_response.status)
                return this.processCreateCompany(_response);
            throw _response;
        });
    }

    protected processCreateCompany(response: any): ng.IPromise<Company | null> {
        const status = response.status; 

        if (status === 201) {
            const _responseText = response.data;
            let result201: Company | null = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? Company.fromJS(resultData201) : <any>null;
            return this.q.resolve(result201);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
        }
        return this.q.resolve<Company | null>(<any>null);
    }

    createSkillSet(skillSet: SkillSet): ng.IPromise<BusinessStream | null> {
        let url_ = this.baseUrl + "/api/Talent/skill-set";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(skillSet);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processCreateSkillSet(_response);
        }, (_response) => {
            if (_response.status)
                return this.processCreateSkillSet(_response);
            throw _response;
        });
    }

    protected processCreateSkillSet(response: any): ng.IPromise<BusinessStream | null> {
        const status = response.status; 

        if (status === 201) {
            const _responseText = response.data;
            let result201: BusinessStream | null = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? BusinessStream.fromJS(resultData201) : <any>null;
            return this.q.resolve(result201);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
        }
        return this.q.resolve<BusinessStream | null>(<any>null);
    }

    getUserTypes(): ng.IPromise<UserType[] | null> {
        let url_ = this.baseUrl + "/api/User/user-type";
        url_ = url_.replace(/[?&]$/, "");

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "GET",
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processGetUserTypes(_response);
        }, (_response) => {
            if (_response.status)
                return this.processGetUserTypes(_response);
            throw _response;
        });
    }

    protected processGetUserTypes(response: any): ng.IPromise<UserType[] | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.data;
            let result200: UserType[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(UserType.fromJS(item));
            }
            return this.q.resolve(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
        }
        return this.q.resolve<UserType[] | null>(<any>null);
    }

    createUserType(userType: UserType): ng.IPromise<UserType | null> {
        let url_ = this.baseUrl + "/api/User/user-type";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userType);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processCreateUserType(_response);
        }, (_response) => {
            if (_response.status)
                return this.processCreateUserType(_response);
            throw _response;
        });
    }

    protected processCreateUserType(response: any): ng.IPromise<UserType | null> {
        const status = response.status; 

        if (status === 201) {
            const _responseText = response.data;
            let result201: UserType | null = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? UserType.fromJS(resultData201) : <any>null;
            return this.q.resolve(result201);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
        }
        return this.q.resolve<UserType | null>(<any>null);
    }

    createUserLog(userLog: UserLog): ng.IPromise<UserLog | null> {
        let url_ = this.baseUrl + "/api/User/user-log";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userLog);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processCreateUserLog(_response);
        }, (_response) => {
            if (_response.status)
                return this.processCreateUserLog(_response);
            throw _response;
        });
    }

    protected processCreateUserLog(response: any): ng.IPromise<UserLog | null> {
        const status = response.status; 

        if (status === 201) {
            const _responseText = response.data;
            let result201: UserLog | null = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? UserLog.fromJS(resultData201) : <any>null;
            return this.q.resolve(result201);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
        }
        return this.q.resolve<UserLog | null>(<any>null);
    }

    createUserAccount(userAccount: UserAccount): ng.IPromise<UserAccount | null> {
        let url_ = this.baseUrl + "/api/User/user-account";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userAccount);

        var options_ = <ng.IRequestConfig>{
            url: url_,
            method: "POST",
            data: content_,
            transformResponse: [], 
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http(options_).then((_response) => {
            return this.processCreateUserAccount(_response);
        }, (_response) => {
            if (_response.status)
                return this.processCreateUserAccount(_response);
            throw _response;
        });
    }

    protected processCreateUserAccount(response: any): ng.IPromise<UserAccount | null> {
        const status = response.status; 

        if (status === 201) {
            const _responseText = response.data;
            let result201: UserAccount | null = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? UserAccount.fromJS(resultData201) : <any>null;
            return this.q.resolve(result201);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException(this.q, "An unexpected server error occurred.", status, _responseText);
        }
        return this.q.resolve<UserAccount | null>(<any>null);
    }
}

export class BusinessStream implements IBusinessStream {
    id?: number | null;
    businessStreamName?: string | null;

    constructor(data?: IBusinessStream) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.businessStreamName = data["businessStreamName"] !== undefined ? data["businessStreamName"] : <any>null;
        }
    }

    static fromJS(data: any): BusinessStream {
        let result = new BusinessStream();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["businessStreamName"] = this.businessStreamName !== undefined ? this.businessStreamName : <any>null;
        return data; 
    }
}

export interface IBusinessStream {
    id?: number | null;
    businessStreamName?: string | null;
}

export class Company implements ICompany {
    id?: number | null;
    companyName?: string | null;
    profileDescription?: string | null;
    businessStreamId: number;
    establishmentDate?: Date | null;
    companyWebsiteUrl?: string | null;

    constructor(data?: ICompany) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.companyName = data["companyName"] !== undefined ? data["companyName"] : <any>null;
            this.profileDescription = data["profileDescription"] !== undefined ? data["profileDescription"] : <any>null;
            this.businessStreamId = data["businessStreamId"] !== undefined ? data["businessStreamId"] : <any>null;
            this.establishmentDate = data["establishmentDate"] ? new Date(data["establishmentDate"].toString()) : <any>null;
            this.companyWebsiteUrl = data["companyWebsiteUrl"] !== undefined ? data["companyWebsiteUrl"] : <any>null;
        }
    }

    static fromJS(data: any): Company {
        let result = new Company();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["profileDescription"] = this.profileDescription !== undefined ? this.profileDescription : <any>null;
        data["businessStreamId"] = this.businessStreamId !== undefined ? this.businessStreamId : <any>null;
        data["establishmentDate"] = this.establishmentDate ? this.establishmentDate.toISOString() : <any>null;
        data["companyWebsiteUrl"] = this.companyWebsiteUrl !== undefined ? this.companyWebsiteUrl : <any>null;
        return data; 
    }
}

export interface ICompany {
    id?: number | null;
    companyName?: string | null;
    profileDescription?: string | null;
    businessStreamId: number;
    establishmentDate?: Date | null;
    companyWebsiteUrl?: string | null;
}

export class SkillSet implements ISkillSet {
    id?: number | null;
    skillSetName?: string | null;

    constructor(data?: ISkillSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.skillSetName = data["skillSetName"] !== undefined ? data["skillSetName"] : <any>null;
        }
    }

    static fromJS(data: any): SkillSet {
        let result = new SkillSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["skillSetName"] = this.skillSetName !== undefined ? this.skillSetName : <any>null;
        return data; 
    }
}

export interface ISkillSet {
    id?: number | null;
    skillSetName?: string | null;
}

export class UserType implements IUserType {
    id?: number | null;
    userTypeName?: string | null;

    constructor(data?: IUserType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.userTypeName = data["userTypeName"] !== undefined ? data["userTypeName"] : <any>null;
        }
    }

    static fromJS(data: any): UserType {
        let result = new UserType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userTypeName"] = this.userTypeName !== undefined ? this.userTypeName : <any>null;
        return data; 
    }
}

export interface IUserType {
    id?: number | null;
    userTypeName?: string | null;
}

export class UserLog implements IUserLog {
    userAccountId: number;
    lastLoginDate?: Date | null;
    lastJobApplyDate?: Date | null;

    constructor(data?: IUserLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userAccountId = data["userAccountId"] !== undefined ? data["userAccountId"] : <any>null;
            this.lastLoginDate = data["lastLoginDate"] ? new Date(data["lastLoginDate"].toString()) : <any>null;
            this.lastJobApplyDate = data["lastJobApplyDate"] ? new Date(data["lastJobApplyDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): UserLog {
        let result = new UserLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userAccountId"] = this.userAccountId !== undefined ? this.userAccountId : <any>null;
        data["lastLoginDate"] = this.lastLoginDate ? this.lastLoginDate.toISOString() : <any>null;
        data["lastJobApplyDate"] = this.lastJobApplyDate ? this.lastJobApplyDate.toISOString() : <any>null;
        return data; 
    }
}

export interface IUserLog {
    userAccountId: number;
    lastLoginDate?: Date | null;
    lastJobApplyDate?: Date | null;
}

export class UserAccount implements IUserAccount {
    id?: number | null;
    userTypeId: number;
    email?: string | null;
    dateOfBirth?: Date | null;
    gender?: string | null;
    isActive: boolean;
    contactNumber?: string | null;
    emailNotificationActive?: boolean | null;
    registrationDate: Date;

    constructor(data?: IUserAccount) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.userTypeId = data["userTypeId"] !== undefined ? data["userTypeId"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.dateOfBirth = data["dateOfBirth"] ? new Date(data["dateOfBirth"].toString()) : <any>null;
            this.gender = data["gender"] !== undefined ? data["gender"] : <any>null;
            this.isActive = data["isActive"] !== undefined ? data["isActive"] : <any>null;
            this.contactNumber = data["contactNumber"] !== undefined ? data["contactNumber"] : <any>null;
            this.emailNotificationActive = data["emailNotificationActive"] !== undefined ? data["emailNotificationActive"] : <any>null;
            this.registrationDate = data["registrationDate"] ? new Date(data["registrationDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): UserAccount {
        let result = new UserAccount();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userTypeId"] = this.userTypeId !== undefined ? this.userTypeId : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["contactNumber"] = this.contactNumber !== undefined ? this.contactNumber : <any>null;
        data["emailNotificationActive"] = this.emailNotificationActive !== undefined ? this.emailNotificationActive : <any>null;
        data["registrationDate"] = this.registrationDate ? this.registrationDate.toISOString() : <any>null;
        return data; 
    }
}

export interface IUserAccount {
    id?: number | null;
    userTypeId: number;
    email?: string | null;
    dateOfBirth?: Date | null;
    gender?: string | null;
    isActive: boolean;
    contactNumber?: string | null;
    emailNotificationActive?: boolean | null;
    registrationDate: Date;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(q: ng.IQService, message: string, status: number, response: string, result?: any): ng.IPromise<any> {
    if(result !== null && result !== undefined)
        return q.reject(result);
    else
        return q.reject(new SwaggerException(message, status, response, null));
}

function blobToText(blob: Blob, q: ng.IQService): ng.IPromise<string> {
    return new q((resolve) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            resolve(this.result);
        }
        reader.readAsText(blob); 
    });
}

// build angular registrations for the client(s)
let clientClasses = {'TheHuntClient': TheHuntClient};

for (let clientClass in clientClasses) {
    if (clientClasses.hasOwnProperty(clientClass)) {
        angular.module('angularApp').service(clientClass, ['$http', '$q', clientClasses[clientClass]]);
    }
}
}